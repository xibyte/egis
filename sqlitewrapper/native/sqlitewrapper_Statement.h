/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class sqlitewrapper_Statement */

#ifndef _Included_sqlitewrapper_Statement
#define _Included_sqlitewrapper_Statement
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     sqlitewrapper_Statement
 * Method:    prepareInternal
 * Signature: ([JJLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_sqlitewrapper_Statement_prepareInternal
  (JNIEnv *, jclass, jlongArray, jlong, jstring);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    stepInternal
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_stepInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    resetInternal
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_resetInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    clearBindingsInternal
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_clearBindingsInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    resetAndClearBindingsInternal
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_resetAndClearBindingsInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    dataCountInternal
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_dataCountInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    columnCountInternal
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_columnCountInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    columnIntInternal
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_columnIntInternal
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    columnDoubleInternal
 * Signature: (JI)D
 */
JNIEXPORT jdouble JNICALL Java_sqlitewrapper_Statement_columnDoubleInternal
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    columnBlobInternal
 * Signature: (JI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_sqlitewrapper_Statement_columnBlobInternal
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    bindIntInternal
 * Signature: (JII)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_bindIntInternal
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    bindDoubleInternal
 * Signature: (JID)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_bindDoubleInternal
  (JNIEnv *, jobject, jlong, jint, jdouble);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    bindBlobInternal
 * Signature: (JI[BI)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_bindBlobInternal
  (JNIEnv *, jobject, jlong, jint, jbyteArray, jint);

/*
 * Class:     sqlitewrapper_Statement
 * Method:    closeInternal
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_sqlitewrapper_Statement_closeInternal
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
